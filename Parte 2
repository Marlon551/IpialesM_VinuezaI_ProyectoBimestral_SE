
/*
 * *Universidad Técnica del Norte
*Facultad de Ingeniería en Ciencias Apicadas
*     Carrera de Telecomunicaciones
*Integranrtes : Ipiales Marlon
*               Israel Vinueza
*               
*               PROYECTO FINAL
             
 */
#define tam_senal 69 // se declara el tamaño de la señal ecg
 #define tam_filtro 7 // se declara el tamaño de la señal del filtro realizado en Tfilter

 extern double ecg_100Hz[tam_senal];  //Se llama a la señal 
 extern double filter_taps[tam_filtro]; 
 double output[tam_senal+tam_filtro];  // Se crea un vector para que alamcene los datos del filtro 
 double output_sig[tam_senal];

 void convolution(double *sig_in,double *sig_out, double *imp, int sig_tam, int impt_tam);       //Aplicado convolucion de llama dentro de arduino.
 void media_filter(double *sig_in, double *output_sig, int sig_tam, int filer);                //se define la funcion para el suavizado de la señal 
 void plot_signal(void);  // definimos la fucnion de grafica

 double promOri;                           //Se guarda el promedio de la señal original
double promFilt;                           //Se guarda la señal filtrada en promedio
void setup() {
  Serial.begin(9600);
}

void loop() {
 convolution((double *)&ecg_100Hz, (double *)&output[0], (double *)&filter_taps[0],
              (int) tam_senal, (int) tam_filtro);                                              // funcion de la convulcion de las señales                 
 media_filter((double *)&ecg_100Hz, (double *)&output_sig[0], (int) tam_senal,5);            //funcion de algoritmo media
 plot_signal();                                                                               // graficar las señales
 SNR();                                                                                     // metrica señal-ruido
 delay(100);
}

// CREACIÓN DEL FILTRO FIR
void convolution (double *sig_in,double *sig_out, double *imp, int sig_tam, int fil_tam){  // convulucion
  int i,j;                                                                              // declaramos variables para hacer dos ciclos
                                                                                        //poner ceros a vector de salida
  for(i=0; i<(sig_tam+fil_tam); i++){
    sig_out[i]=0;
    }
    for(i=0; i<sig_tam; i++){
      for(j=0; j<fil_tam; j++){
        sig_out[i+j]=sig_out[i+j] + sig_in[i]*imp[j];
        }
      }
  }
// suavizado Media 
void media_filter(double *sig_in, double *output_sig, int sig_tam, int filter){
  int k,l;                                                                                             // declaramos varibles 
  k=floor(filter/2);                                                                              // decaramos la cariable k
  while(k<sig_tam-floor(filter/2)-1){                                                               //inciiamos ciclo while 
    k++;
    output_sig[k]=0;
    l=-floor(filter/2);
    while(l<floor(filter/2)){
      l++;
      output_sig[k]=output_sig[k]+sig_in[k+l];
      }
      output_sig[k]=output_sig[k]/((filter*2)+1);
    }
  }
  
  //Metrica para la medición SNR
void SNR(){
  int i;                                                                                      //variable tipo enntera
  for(i=0;i<tam_senal;i++){                                                               //ciclo de respeticion de la variable i
    promOri=promOri+ecg_100Hz[i];                                                       //guarda los valores del promedio en cada punto 
    }
   for(i=0;i<tam_senal;i++){                                                            //reccorrico del numero de datos de la señal filtrada
    promFilt=promFilt+output[i];
    }
   double promFilt1 = promOri/tam_senal;                                            //lo divide para el numero de datos de la señal filtrada
   double promFilt2 = promFilt/tam_senal; 
   double vout = (promFilt1*5)/1023;                                          //hace el cambio de datos de hasta 1023 en la señal original para el voltaje de salida
   double vfilt = (promFilt2*5)/1023;                                               //hace el cambio de datos de hasta 1023 en la señalfiltrada para el voltaje de filtrado
   double snr = 20*log(vfilt/vout);                                               //calculo de la metrica
  Serial.println("");//salto de linea
  Serial.println(String("promedio señal ingresada: ")+String(promFilt1));//imprime el valor promedio
  Serial.println(String("promedio señal filtrada: ")+String(promFilt2));   //imprime el valor promedio
  Serial.println(String("Voltaje de salida señal ingresada: ")+String(vout));//imprime el valor promedio de voltaje de la señal ingresada
  Serial.println(String("Voltaje de salida señal filtrada: ")+String(vfilt)); //imprime el valor promedio de voltaje de la señal filtrada
  Serial.println(String("SNR: ")+String(snr)+String(" decibeles"));   //imprime el valor de la metrica snr
  }
  
//Graficación de la señal 
void plot_signal(void){   
  int i;
  for(i=0; i<tam_senal; i++){
    Serial.print(ecg_100Hz[i]);
    Serial.print(",");
    Serial.print(output_sig[i]);
    Serial.print(",");
    Serial.println(output[i]);
    delay(5);
    }
  }


//construccion del filtro
double filter_taps[7] = {     
  0.036339855837476884,
  0.10904207824156188,
  0.19081761980371023,
  0.22715747564118702,
  0.19081761980371023,
  0.10904207824156188,
  0.036339855837476884
};

  //Datos de la señal ECG se`procede a escoger 69 para no sobrepasar la memoria del arduino
double ecg_100Hz[69] = {
405,
387,
383,
381,
378,
396,
395,
416,
431,
442,
470,
481,
514,
530,
535,
553,
546,
556,
552,
541,
545,
524,
520,
505,
487,
488,
466,
467,
459,
449,
457,
443,
453,
450,
444,
456,
443,
454,
452,
450,
464,
454,
466,
466,
464,
477,
468,
480,
480,
477,
489,
479,
491,
487,
483,
493,
484,
498,
499,
498,
516,
513,
544,
578,
627,
700,
751,
816,
854,
};
